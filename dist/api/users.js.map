{"version":3,"sources":["../../src/api/users.js"],"names":["config","db","id","load","req","callback","user","users","find","err","index","res","params","json","create","body","console","log","query","updateProperties","photo","employeeId","firstName","lastName","mobilePhone","email","likes","hobbies","update","$set","options","upsert","new","setDefaultsOnInsert","findOneAndUpdate","error","read","sendStatus","delete","splice","indexOf"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe;AAAA,KAAGA,MAAH,QAAGA,MAAH;AAAA,KAAWC,EAAX,QAAWA,EAAX;AAAA,QAAoB,wCAAS;;AAE3C;AACAC,MAAI,MAHuC;;AAK3C;;;AAGAC,MAR2C,gBAQtCC,GARsC,EAQjCF,EARiC,EAQ7BG,QAR6B,EAQnB;AACvB,OAAIC,OAAOC,MAAMC,IAAN,CAAW;AAAA,WAAQF,KAAKJ,EAAL,KAAYA,EAApB;AAAA,IAAX,CAAX;AAAA,OACCO,MAAMH,OAAO,IAAP,GAAc,WADrB;AAEAD,YAASI,GAAT,EAAcH,IAAd;AACA,GAZ0C;;;AAc3C;AACAI,OAf2C,wBAezBC,GAfyB,EAepB;AAAA,OAAfC,MAAe,SAAfA,MAAe;;AACtBD,OAAIE,IAAJ,CAASN,KAAT;AACA,GAjB0C;;;AAmB3C;AACAO,QApB2C,yBAoB1BH,GApB0B,EAoBrB;AAAA,OAAbI,IAAa,SAAbA,IAAa;;AACrBC,WAAQC,GAAR,CAAYF,IAAZ;AACA,OAAIG,QAAQ;AACX,aAASH,KAAKL,KAAL,GAAaK,KAAKL,KAAlB,GAA0B;AADxB,IAAZ;AAGA,OAAIS,mBAAmB,EAAvB;AACA,OAAIJ,KAAKK,KAAT,EAAgBD,iBAAiBC,KAAjB,GAAyBL,KAAKK,KAA9B;AAChB,OAAIL,KAAKM,UAAT,EAAqBF,iBAAiBE,UAAjB,GAA8BN,KAAKM,UAAnC;AACrB,OAAIN,KAAKO,SAAT,EAAoBH,iBAAiBG,SAAjB,GAA6BP,KAAKO,SAAlC;AACpB,OAAIP,KAAKQ,QAAT,EAAmBJ,iBAAiBI,QAAjB,GAA4BR,KAAKQ,QAAjC;AACnB,OAAIR,KAAKS,WAAT,EAAsBL,iBAAiBK,WAAjB,GAA+BT,KAAKS,WAApC;AACtB,OAAIT,KAAKU,KAAT,EAAgBN,iBAAiBM,KAAjB,GAAyBV,KAAKU,KAA9B;AAChB,OAAIV,KAAKW,KAAT,EAAgBP,iBAAiBO,KAAjB,GAAyBX,KAAKW,KAA9B;AAChB,OAAIX,KAAKY,OAAT,EAAkBR,iBAAiBQ,OAAjB,GAA2BZ,KAAKY,OAAhC;;AAElB,OAAIC,SAAS,EAAEC,MAAMV,gBAAR,EAAb;AACA,OAAIW,UAAU,EAAEC,QAAQ,IAAV,EAAgBC,KAAK,IAArB,EAA2BC,qBAAqB,IAAhD,EAAd;;AAEA,mBAAKC,gBAAL,CAAsBhB,KAAtB,EAA6BU,MAA7B,EAAqCE,OAArC,EAA8C,UAACrB,GAAD,EAAMH,IAAN,EAAe;AAC5D,QAAIG,GAAJ,EAAS,OAAOO,QAAQmB,KAAR,CAAc1B,GAAd,CAAP;AACTE,QAAIE,IAAJ,CAAS;AACR,eAAU,KADF;AAER,gBAAW;AAFH,KAAT;AAIA,IAND;AAOA,GA7C0C;;;AA+C3C;AACAuB,MAhD2C,uBAgD5BzB,GAhD4B,EAgDvB;AAAA,OAAbL,IAAa,SAAbA,IAAa;;AACnBK,OAAIE,IAAJ,CAASP,IAAT;AACA,GAlD0C;;;AAoD3C;AACAsB,QArD2C,yBAqDpBjB,GArDoB,EAqDf;AAAA,OAAnBL,IAAmB,SAAnBA,IAAmB;AAAA,OAAbS,IAAa,SAAbA,IAAa;;;AAE3BJ,OAAI0B,UAAJ,CAAe,GAAf;AACA,GAxD0C;;;AA0D3C;AACAC,QA3D2C,0BA2D1B3B,GA3D0B,EA2DrB;AAAA,OAAbL,IAAa,SAAbA,IAAa;;AACrBC,SAAMgC,MAAN,CAAahC,MAAMiC,OAAN,CAAclC,IAAd,CAAb,EAAkC,CAAlC;AACAK,OAAI0B,UAAJ,CAAe,GAAf;AACA;AA9D0C,EAAT,CAApB;AAAA,C","file":"users.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport User from '../models/users';\n\nexport default ({ config, db }) => resource({\n\n\t/** Property name to store preloaded entity on `request`. */\n\tid: 'user',\n\n\t/** For requests with an `id`, you can auto-load the entity.\n\t *  Errors terminate the request, success sets `req[id] = data`.\n\t */\n\tload(req, id, callback) {\n\t\tlet user = users.find(user => user.id === id),\n\t\t\terr = user ? null : 'Not found';\n\t\tcallback(err, user);\n\t},\n\n\t/** GET / - List all entities */\n\tindex({ params }, res) {\n\t\tres.json(users);\n\t},\n\n\t/** POST / - Create a new entity */\n\tcreate({ body }, res) {\n\t\tconsole.log(body);\n\t\tvar query = { \n\t\t\t'index': body.index ? body.index : null\n\t\t};\n\t\tvar updateProperties = {};\n\t\tif (body.photo) updateProperties.photo = body.photo;\n\t\tif (body.employeeId) updateProperties.employeeId = body.employeeId;\n\t\tif (body.firstName) updateProperties.firstName = body.firstName;\n\t\tif (body.lastName) updateProperties.lastName = body.lastName;\n\t\tif (body.mobilePhone) updateProperties.mobilePhone = body.mobilePhone;\n\t\tif (body.email) updateProperties.email = body.email;\n\t\tif (body.likes) updateProperties.likes = body.likes;\n\t\tif (body.hobbies) updateProperties.hobbies = body.hobbies;\n\n\t\tvar update = { $set: updateProperties };\n\t\tvar options = { upsert: true, new: true, setDefaultsOnInsert: true };\n\n\t\tUser.findOneAndUpdate(query, update, options, (err, user) => {\n\t\t\tif (err) return console.error(err);\n\t\t\tres.json({\n\t\t\t\t'status': '202',\n\t\t\t\t'message': 'User successfully updated/created'\n\t\t\t});\n\t\t});\n\t},\n\n\t/** GET /:id - Return a given entity */\n\tread({ user }, res) {\n\t\tres.json(user);\n\t},\n\n\t/** PUT /:id - Update a given entity */\n\tupdate({ user, body }, res) {\n\t\t\n\t\tres.sendStatus(204);\n\t},\n\n\t/** DELETE /:id - Delete a given entity */\n\tdelete({ user }, res) {\n\t\tusers.splice(users.indexOf(user), 1);\n\t\tres.sendStatus(204);\n\t}\n});\n"]}
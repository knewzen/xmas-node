{"version":3,"sources":["../../src/models/users.js"],"names":["UserSchema","Schema","index","type","Number","default","photo","String","employeeId","firstName","lastName","mobilePhone","email","hobbies","likes","friend","ObjectId","ref","pre","next","self","findByIdAndUpdate","$inc","err","counter","console","log","User","model","findOneAndUpdate","upsert","new","setDefaultsOnInsert","result","error","readData","then","value","createRelationships","Promise","resolve","reject","readFile","csvPath","fileData","rows","eachSeries","splice","row","callback","createUser","user","res","json","id","find","sort","exec","users","n","length","element","friendIndex","findUser","findUserAndUpdate","params","save","findOne","$set","_id","doc"],"mappings":"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","file":"users.js","sourcesContent":["import fs from 'fs';\nimport async from 'async';\nimport parse from 'csv-parse';\nimport mongoose from 'mongoose';\n\nimport config from '../config.json';\nimport Counter from './counter';\n\nvar UserSchema = mongoose.Schema({\n\tindex: { type: Number, default: 0 },\n\tphoto: String,\n\temployeeId: String,\n\tfirstName: String,\n\tlastName: String,\n\tmobilePhone: String,\n\temail: String,\n\thobbies: String,\n\tlikes: String,\n\tfriend: { type: mongoose.Schema.ObjectId, ref: UserSchema }\n});\n\nUserSchema.pre('save', function (next) {\n\tvar self = this;\n\tCounter.findByIdAndUpdate({ '_id': 'userId' }, { $inc: { index: 1 } }, function (err, counter) {\n\t\tif (err) return console.log(err);\n\t\tself.index = counter.index;\n\t\tnext();\n\t});\n});\n\nconst User = mongoose.model('User', UserSchema);\n\nCounter.findOneAndUpdate({ '_id': 'userId' }, { '_id': 'userId' }, { upsert: true, new: true, setDefaultsOnInsert: true }, function (err, result) {\n\tif (err) return console.error(err);\n\n\tif (result.index === 0) {\n\t\treadData().then((value) => {\n\t\t\tcreateRelationships(76);\n\t\t});\n\t} else {\n\t\tconsole.log('Db has entries');\n\t}\n});\n\nfunction readData() {\n\treturn new Promise((resolve, reject) => {\n\t\tfs.readFile(config.csvPath, (err, fileData) => {\n\t\t\tif (err) return console.log(err);\n\t\t\tparse(fileData, (err, rows) => {\n\t\t\t\t// Your CSV data is in an array of arrays passed to this callback as rows.\n\t\t\t\tif (err) return console.log(err);\n\t\t\t\tasync.eachSeries(rows.splice(1), (row, callback) => {\n\t\t\t\t\tcreateUser({\n\t\t\t\t\t\t'photo': row[1],\n\t\t\t\t\t\t'employeeId': row[2],\n\t\t\t\t\t\t'firstName': row[3],\n\t\t\t\t\t\t'lastName': row[4],\n\t\t\t\t\t\t'mobilePhone': row[5],\n\t\t\t\t\t\t'email': row[6]\n\t\t\t\t\t}).then((user)=> {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t});\n\t\t\t\t}, (error) => {\n\t\t\t\t\tif (error) res.json(500, { error: error });\n\t\t\t\t\tconsole.log('Users added to database');\n\t\t\t\t\tresolve(true);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction createRelationships(id) {\n\tconsole.log('Creating Relationships');\n\tUser.find({}).sort({ \"index\": 1 }).exec((err, users) => {\n\t\tif (err) return console.log(err);\n\t\tvar n = users.length;\n\t\tasync.eachSeries(users, (element, callback) => {\n\t\t\tlet friendIndex = (element.index + id) % n;\n\t\t\tfindUser({ 'index': friendIndex }).then((friend) => {\n\t\t\t\tfindUserAndUpdate({ 'index': element.index }, friend).then((user) => {\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t});\n\t\t}, (error) => {\n\t\t\tif (error) res.json(500, { error: error });\n\n\t\t\tconsole.log('Relationships created');\n\t\t});\n\t});\n}\n\nfunction createUser(params) {\n\treturn new Promise((resolve, reject) => {\n\t\tlet user = new User(params);\n\t\tuser.save((err, user) => {\n\t\t\tif (err) return console.error(err);\n\t\t\tresolve(user);\n\t\t});\n\t});\n}\n\nfunction findUser(params) {\n\treturn new Promise((resolve, reject) => {\n\t\tUser.findOne(params).exec((err, friend) => {\n\t\t\tif (err) return console.log(err);\n\t\t\tresolve(friend);\n\t\t});\n\t});\n}\n\nfunction findUserAndUpdate(params, friend) {\n\treturn new Promise((resolve, reject) => {\n\t\tUser.findOneAndUpdate(params, { $set: { 'friend': friend._id } }, { 'new': true }, (err, doc) => {\n\t\t\tresolve(doc);\n\t\t});\n\t});\n\t\n}\n\nexport default User;"]}